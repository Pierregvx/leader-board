// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): BigInt {
    let value = this.get("deposit");
    return value!.toBigInt();
  }

  set deposit(value: BigInt) {
    this.set("deposit", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value!.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get redeem(): BigInt {
    let value = this.get("redeem");
    return value!.toBigInt();
  }

  set redeem(value: BigInt) {
    this.set("redeem", Value.fromBigInt(value));
  }

  get withdraw(): BigInt {
    let value = this.get("withdraw");
    return value!.toBigInt();
  }

  set withdraw(value: BigInt) {
    this.set("withdraw", Value.fromBigInt(value));
  }

  get removed(): BigInt {
    let value = this.get("removed");
    return value!.toBigInt();
  }

  set removed(value: BigInt) {
    this.set("removed", Value.fromBigInt(value));
  }

  get minted(): BigInt {
    let value = this.get("minted");
    return value!.toBigInt();
  }

  set minted(value: BigInt) {
    this.set("minted", Value.fromBigInt(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    return value!.toBigInt();
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get xp(): i32 {
    let value = this.get("xp");
    return value!.toI32();
  }

  set xp(value: i32) {
    this.set("xp", Value.fromI32(value));
  }

  get chains(): Array<BigInt> | null {
    let value = this.get("chains");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set chains(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("chains");
    } else {
      this.set("chains", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}
